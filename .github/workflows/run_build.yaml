# Workflow derived from https://github.com/r-lib/actions/tree/master/examples
# Need help debugging build failures? Start at https://github.com/r-lib/actions#where-to-find-help
on:
  workflow_call:
    inputs:
      os:
        required: true
        type: string
      r:
        required: true
        type: string
      rtools:
        required: true
        type: string
    secrets:
      envPAT:
        required: true

name: run build

jobs:
  build:
    runs-on: ${{ inputs.os }}

    name: ${{ inputs.os }} (${{ inputs.r }})

    strategy:
      fail-fast: false

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_KEEP_PKG_SOURCE: yes
      NOT_CRAN: true

    steps:
      - uses: actions/checkout@v2
      - uses: ./actions/local-action
      - uses: n1hility/cancel-previous-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Get Cache Variables
        run: |
          echo "CMDSTANR_PATH=${HOME}/.cmdstanr" >> $GITHUB_ENV
        shell: bash
      - uses: r-lib/actions/setup-pandoc@v2
      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ inputs.r }}
          use-public-rspm: true
          rtools-version: ${{ inputs.rtools }}

      # packages that are needed for R CMD CHECK
      - uses: r-lib/actions/setup-r-dependencies@v2
        with:
          cache-version: 1
          extra-packages: |
            stan-dev/cmdstanr
            rcmdcheck
            checkmate
            jsonlite
            posterior
            processx
            R6
            BH
            RcppEigen
            StanHeaders
            RcppParallel
            withr
            testthat
            rmarkdown
            knitr
            any::XML
            any::textshaping

      - name: Cache CmdStan
        uses: actions/cache@v2
        with:
          path: ${{env.CMDSTANR_PATH}}
          key: CmdStanR-${{runner.os}}
      - name: Install CmdStanR
        run: |
          cmdstanr::check_cmdstan_toolchain(fix = TRUE)
          cmdstanr::install_cmdstan(cores = parallel::detectCores())
        shell: Rscript {0}
      - name: Install Development RStan on Windows
        if: runner.os == 'Windows'
        run: |
          Sys.setenv(MAKEFLAGS=paste0("-j",parallel::detectCores()))
          install.packages(c("StanHeaders", "rstan"), repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
        shell: Rscript {0}
